<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风骚的Mic</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://istio.tech/"/>
  <updated>2019-07-11T05:06:16.000Z</updated>
  <id>https://istio.tech/</id>
  
  <author>
    <name>Mic</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Hexo快速构建个人博客</title>
    <link href="https://istio.tech/2019/07/09/%E4%BD%BF%E7%94%A8Hexo%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://istio.tech/2019/07/09/使用Hexo快速构建个人博客/</id>
    <published>2019-07-09T07:15:00.000Z</published>
    <updated>2019-07-11T05:06:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章讲到了如何使用github大家个人博客，博客搭建好以后可以基于个人站点来进行访问，但是现在存在一个问题，一个不懂前端开发的人如何去写各种前端页面呢？<br>好在，有了hexo，这些都可以轻松搞定.</p><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页</p></blockquote><p>这篇文章我会写如何使用hexo快速构建一个漂亮的个人博客。如果想获得更多的素材，可以在<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a>中查看</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="node环境安装"><a href="#node环境安装" class="headerlink" title="node环境安装"></a>node环境安装</h2><p>下载Node.js 官方地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p><p><strong>选择一个适合系统的版本</strong><br><img src="/images/pasted-5.png" alt="upload successful"></p><p>安装的过程比较简单，直接一直<code>下一步</code>即可。安装成功后，在<code>cmd</code>中输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v 查看 node 版本</span><br><span class="line">npm -v 查看 npm 版本</span><br></pre></td></tr></table></figure><h2 id="使用node安装hexo"><a href="#使用node安装hexo" class="headerlink" title="使用node安装hexo"></a>使用node安装hexo</h2><p>node安装好之后，可以使用npm来安装hexo</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog(生成的博客文件夹的名字，自定义,会在对应执行该语句的路径生成对应的文件)</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server（启动hexo）</span><br></pre></td></tr></table></figure><p>输入: <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a><br>就可以看到默认的博客页面了</p><h1 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h1><h2 id="hexo基本命令"><a href="#hexo基本命令" class="headerlink" title="hexo基本命令"></a>hexo基本命令</h2><p>这些命令，大部分都要在上一步创建好的<code>blog</code>目录下来执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure><h2 id="如何把博客发布到github"><a href="#如何把博客发布到github" class="headerlink" title="如何把博客发布到github"></a>如何把博客发布到github</h2><p>前面我们在本地通过<code>http://localhost:4000</code>可以访问到默认的博客站点，如果需要发布到外网访问，需要把代码上传到github对应站点的repository中。<br>通过<code>hexo deploy</code> 把生成好的静态页面发布到git，但是在此之前，需要配置目标github的地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">vim _config.xml</span><br></pre></td></tr></table></figure><p>找到<code>deploy</code>的配置项，增加如下配置。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="string">git@github.com:2227324689/2227324689.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>接着执行<code>hexo deploy</code>，就能把页面提交到github。</p><blockquote><p>如果出现下面这个错误，说明还需要安装一个插件，在根目录下执行<code>npm install hexo-deployer-git --save</code> 安装插件</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deployer <span class="keyword">not</span> found: github 或者 Deployer <span class="keyword">not</span> found: git</span><br></pre></td></tr></table></figure><h2 id="如何更新文章呢？"><a href="#如何更新文章呢？" class="headerlink" title="如何更新文章呢？"></a>如何更新文章呢？</h2><p>博客搭建好之后，最重要的就是要更新博客了。有两种方式来更新</p><h3 id="使用命令来创建"><a href="#使用命令来创建" class="headerlink" title="使用命令来创建"></a>使用命令来创建</h3><p>进入到<code>blog</code>目录，执行<code>hexo new &#39;blog-name&#39;</code> 来创建一个页面，在blog\source_post目录下就会生成一个blog-name.md文件</p><p>然后我们使用markdown的语法来写文章即可</p><h3 id="使用hexo-admin更新博客"><a href="#使用hexo-admin更新博客" class="headerlink" title="使用hexo-admin更新博客"></a>使用hexo-admin更新博客</h3><p>hexo提供了一个admin页面，来基于可视化窗口更新博客.<br>执行下面两个命令，安装hexo-admin以及启动hexo server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br><span class="line">hexo server -d(开启hexo操作)</span><br></pre></td></tr></table></figure><p>打开<a href="http://IP:4000/admin" target="_blank" rel="noopener">http://IP:4000/admin</a> 就可以进入控制台。</p><ul><li>posts 新建博客</li><li>pages 页面</li><li>deploy 将更新的博客发布到github</li></ul><h2 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h2><p>默认的博客界面比较丑，想要更换主题怎么办呢？</p><p>hexo官方提供了非常多的主题：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a><br>选择自己喜欢的主题，并且下载到本地。<br>把主题拷贝到 <code>blog/themes</code>目录下</p><p>修改_config.yml中的theme: landscape改为theme: yilia，然后执行hexo g来重新基于新的主题生成静态页面</p><h2 id="更多的hexo操作"><a href="#更多的hexo操作" class="headerlink" title="更多的hexo操作"></a>更多的hexo操作</h2><p>由于每个人对于hexo的使用需求不一样，所以大家可以自己去<br><a href="https://hexo.io/zh-cn/docs/plugins" target="_blank" rel="noopener">这个网站</a>查看更多的hexo说明。</p><p><img src="/images/pasted-6.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇文章讲到了如何使用github大家个人博客，博客搭建好以后可以基于个人站点来进行访问，但是现在存在一个问题，一个不懂前端开发的人如何去写各种前端页面呢？&lt;br&gt;好在，有了hexo，这些都可以轻松搞定.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hexo 是一个快速、简洁
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://istio.tech/tags/Hexo/"/>
    
      <category term="Node" scheme="https://istio.tech/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Github搭建个人博客</title>
    <link href="https://istio.tech/2019/07/09/hello-world/"/>
    <id>https://istio.tech/2019/07/09/hello-world/</id>
    <published>2019-07-09T05:39:00.000Z</published>
    <updated>2019-07-09T07:15:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作为程序员，我们把大部分写代码的能力交给了搜索引擎，把大部分时间交给了业务逻辑的开发。却很少停下来对自己的工作和学习做一些总结和思考。我认为写博客是一种很好的习惯，不是为了给别人看自己写的东西有多🐂🍺，而是阶段性的给自己做一些总结。长期的积累，能够给自己带来很大的变化！</p></blockquote><p>我以前比较喜欢用gitbook来整理一些东西，后来因为github用得多，就干脆基于github来构建一个个人博客，闲暇之余可以把一些东西沉淀下来。</p><h1 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h1><h2 id="账号注册"><a href="#账号注册" class="headerlink" title="账号注册"></a>账号注册</h2><p>打开这个网址，注册一个github的账号<br><a href="https://github.com/join?source=header-home" target="_blank" rel="noopener">https://github.com/join?source=header-home</a></p><h2 id="创建repository"><a href="#创建repository" class="headerlink" title="创建repository"></a>创建repository</h2><p>创建一个repository，repository name设置的注意事项</p><p>[username].github.io , <code>username</code> 必须是github注册的用户名，否则无法访问</p><p><img src="/images/pasted-0.png" alt="upload successful"></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>创建好repository之后，提交一个基本的index.html。然后使用<br><code>[username].github.io</code> 来访问到index.html页面</p><blockquote><p>在本地的终端上，按照下面的命令，来提交一个index.html文件到github对应刚刚创建的repository中</p></blockquote><p><strong>index.html自己提前创建好，内容没有要求</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add index.html</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin https://github.com/2227324689/2227324689.github.io.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>如果本地没有安装git客户端，是无法使用这些命令的。</p><h2 id="git客户端（window"><a href="#git客户端（window" class="headerlink" title="git客户端（window)"></a>git客户端（window)</h2><p>首先下载git for window 客户端<br><a href="https://github.com/git-for-windows/git/releases/tag/v2.22.0.windows.1" target="_blank" rel="noopener">https://github.com/git-for-windows/git/releases/tag/v2.22.0.windows.1</a></p><p>根据自己的操作系统版本来选择对应的下载文件。<br><img src="/images/pasted-1.png" alt="upload successful"></p><p>安装过程就不再赘述，一直<code>下一步</code>即可，安装结束之后，可以在<code>cmd</code>命令中输入<code>git -v</code> ，如果能够返回当前git的版本号，说明git安装成功了。</p><h2 id="git配置ssh"><a href="#git配置ssh" class="headerlink" title="git配置ssh"></a>git配置ssh</h2><p>github提供了两种方式来pull/push 文件，一种是基于https，一种是基于ssh。两种方式都可以用，但是为了方便起见（不用每次都输入密码），可以配置ssh</p><p><img src="/images/pasted-2.png" alt="upload successful"></p><h3 id="在本地生成ssh-公私钥"><a href="#在本地生成ssh-公私钥" class="headerlink" title="在本地生成ssh 公私钥"></a>在本地生成ssh 公私钥</h3><blockquote><p>检查本机是否有ssh key设置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh 或cd .ssh</span><br><span class="line"></span><br><span class="line">如果没有则提示： No such file or directory</span><br><span class="line"></span><br><span class="line">如果有则进入~/.ssh路径下（ls查看当前路径文件，rm * 删除所有文件）</span><br><span class="line">$ cd ~/.ssh 或cd .ssh</span><br><span class="line"></span><br><span class="line">**如果.ssh文件夹不存在，则创建一个**</span><br></pre></td></tr></table></figure><blockquote><p>使用ssh-keygen生成公私钥</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在.ssh目录下，执行`ssh-keygen -t rsa -C &quot;xxxxxx@yy.com&quot;`</span><br><span class="line">邮箱地址没有限制，建议填有效邮箱</span><br><span class="line">代码参数含义：</span><br><span class="line">-t 指定密钥类型，默认是 rsa ，可以省略。</span><br><span class="line">-C 设置注释文字，比如邮箱。</span><br><span class="line">-f 指定密钥文件存储文件名。</span><br></pre></td></tr></table></figure><p>这个命令执行过程中，会要求你输入文件名和密码，如果不需要改，则直接默认回车就行<br>这里的密码可以不用设，如果设置了，后续每次提交文件到github都需要输入密码验证</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> which to save the key (/Users/mic/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><p><strong>命令执行结束后，会在.ssh目录下生成两个文件，<code>id_rsa</code>,<code>id_rsa.pub</code></strong></p><p>id_rsa.pub是公钥，这个公钥可以直接用可以打开，里面就是一段公钥的代码，这段代码需要复制下来。后续需要配置到github上</p><h3 id="github上配置公钥"><a href="#github上配置公钥" class="headerlink" title="github上配置公钥"></a>github上配置公钥</h3><p>进入 &gt; profile -&gt; settings -&gt;ssh and GPG keys。<br>或者直接<a href="https://github.com/settings/keys" target="_blank" rel="noopener">点击这里</a>直接跳转到ssh key配置的页面</p><p><img src="/images/pasted-3.png" alt="upload successful"></p><p>点击<code>New SSH key</code>.</p><p>title  自己定义一个名称，一般来说用来区分当前是哪个机器的key，后续方便管理</p><p>key   把前面生成的<code>id_rsa.pub</code>文件中的内容全部复制粘贴在这里即可。点击<code>Add SSH key</code> 保存</p><p><img src="/images/pasted-4.png" alt="upload successful"></p><blockquote><p>在本地的客户端进行测试</p></blockquote><p>输入下面命令，所有内容都不用改。 </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line"></span><br><span class="line">--如果返回下面这个信息，说明ssh配置成功了</span><br><span class="line">Hi <span class="number">2227324689</span>! You've successfully authenticated, but GitHub does <span class="keyword">not</span> provide shell access.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;作为程序员，我们把大部分写代码的能力交给了搜索引擎，把大部分时间交给了业务逻辑的开发。却很少停下来对自己的工作和学习做一些总结和思考。我认为写博客是一种很好的习惯，不是为了给别人看自己写的东西有多🐂🍺，而是阶段性的给自己做一些总结。长期的积累，
      
    
    </summary>
    
    
      <category term="github,hexo,博客" scheme="https://istio.tech/tags/github-hexo-%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>

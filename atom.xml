<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风骚的Mic</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://istio.tech/"/>
  <updated>2019-07-18T01:55:35.000Z</updated>
  <id>https://istio.tech/</id>
  
  <author>
    <name>Mic</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IntelliJ IDEA导入Zookeeper源码</title>
    <link href="https://istio.tech/2019/07/14/IntelliJ-IDEA%E5%AF%BC%E5%85%A5Zookeeper%E6%BA%90%E7%A0%81/"/>
    <id>https://istio.tech/2019/07/14/IntelliJ-IDEA导入Zookeeper源码/</id>
    <published>2019-07-14T15:09:14.000Z</published>
    <updated>2019-07-18T01:55:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>我在使用IDEA导入zookeeper并且尝试运行时，遇到了很多的问题， 如果大家也遇到类似的需求，可以参考这篇文章来做</p><a id="more"></a><p>我会基于ant和maven两种形式来构建zookeeper的源码</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="下载zookeeper源码"><a href="#下载zookeeper源码" class="headerlink" title="下载zookeeper源码"></a>下载zookeeper源码</h2><p>在github上搜索<code>zookeeper</code>, 一般来说，第一个结果就是zookeeper的源码<br>也可以通过<a href="https://github.com/apache/zookeeper" target="_blank" rel="noopener">直达通道</a>快速进去<br>我们下载源码，一定不要直接clone他的正在维护的分支，而是要进入<code>release</code>菜单，下载对外发布的版本。</p><p><img src="/images/pasted-7.png" alt="upload successful"></p><blockquote><p>本次操作我们使用zookeeper-3.5.5版本。</p></blockquote><p>下载<code>zip</code>或者<code>tar.gz</code>都可以。也可以通过<a href="https://github.com/apache/zookeeper/archive/release-3.5.5.zip" target="_blank" rel="noopener">直达通道</a>直接下载</p><h1 id="配置ant"><a href="#配置ant" class="headerlink" title="配置ant"></a>配置ant</h1><p>zookeeper默认是基于ant来构建，如果有同学不了解ant，也没必要学习了，毕竟现在使用ant来构建项目的已经很少了。</p><p>ant的下载地址<a href="https://ant.apache.org/bindownload.cgi" target="_blank" rel="noopener">https://ant.apache.org/bindownload.cgi</a></p><p>下载好之后，在环境变量里面配置几个东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ANT_HOMT=$&#123;ant_home&#125;  //ant_home为自己本地安装的目录</span><br><span class="line">PATH=%ANT_HOME%/bin</span><br><span class="line">CLASSPATH=%ANT_HOME%/lib</span><br></pre></td></tr></table></figure><p>配置好之后，就可以在cmd中执行ant -version. 会得到下面这段信息，说明安装成功</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apache Ant(TM) version <span class="number">1</span>.<span class="number">9</span>.<span class="number">14</span> compiled on March <span class="number">12</span> <span class="number">2019</span></span><br></pre></td></tr></table></figure><h1 id="配置maven"><a href="#配置maven" class="headerlink" title="配置maven"></a>配置maven</h1><p>由于我们会用两种形式来构建，所以也需要把maven的环境配置好。</p><p>maven的下载地址<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a></p><p>我下载的是<code>apache-maven-3.6.1-bin.tar.gz</code><br>只需要解压到指定目录就行</p><p>配置环境变量</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">M2_HOME=$&#123;maven_home&#125; //替换成自己解压出来的目录</span><br><span class="line"><span class="built_in">PATH</span>=<span class="variable">%M2_HOME%</span>/bin</span><br></pre></td></tr></table></figure><p>同样，输入<code>mvn -version</code>命令，如果得到下面的信息，说明安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Apache Maven 3.5.0 (ff8f5e7444045639af65f6095c62210b5713f426; 2017-04-04T03:39:06+08:00)</span><br><span class="line">Maven home: /Users/xxx/Documents/software/apache-maven-3.5.0</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，如果要用到maven来构建，会要从远程私服上下载jar包，默认会从中央仓库上下载，速度很慢。可以把maven的远程私服改成阿里的仓库，具体的教程我就不再这里说明，大家可以搜索下关键字【maven 阿里】就会有相应的教程来指导</p></blockquote><h1 id="基于ant构建zookeeper源码"><a href="#基于ant构建zookeeper源码" class="headerlink" title="基于ant构建zookeeper源码"></a>基于ant构建zookeeper源码</h1><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>进入到zookeeper解压的根目录下，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ant eclipse</span><br></pre></td></tr></table></figure><p>显示如下结果，表示编译成功</p><p><img src="/images/pasted-11.png" alt="upload successful"></p><h2 id="导入到IDEA中"><a href="#导入到IDEA中" class="headerlink" title="导入到IDEA中"></a>导入到IDEA中</h2><p>选择<code>import project</code></p><blockquote><p><img src="/images/pasted-12.png" alt="upload successful"></p></blockquote><p>接着，选择eclipse,然后一直下一步就行</p><blockquote><p><img src="/images/pasted-13.png" alt="upload successful"></p></blockquote><h2 id="启动zookeeper"><a href="#启动zookeeper" class="headerlink" title="启动zookeeper"></a>启动zookeeper</h2><p>针对单机版本和集群版本，分别对应两个启动类</p><p>单机：ZooKeeperServerMain</p><p>集群：QuorumPeerMain</p><p>源码调试，不需要搭建集群，所以直接基于单机环境来启动即可</p><h3 id="配置run-configuration"><a href="#配置run-configuration" class="headerlink" title="配置run configuration"></a>配置run configuration</h3><p>按照下面这个位置进行配置<br><img src="/images/pasted-14.png" alt="upload successful"></p><p>添加application<br><img src="/images/pasted-15.png" alt="upload successful"></p><p>红色标注部分，分别是ZookeeperServerMain这个类的位置。以及main方法的启动参数zoo.cfg</p><blockquote><p>zoo.cfg默认是不存在的,但是在源码根目录有一个conf目录，里面提供了zoo_sample.cfg。 我们只需要复制一份改一个名字即可</p></blockquote><p><img src="/images/pasted-16.png" alt="upload successful"></p><p>配置好之后，直接启动即可</p><p><img src="/images/pasted-17.png" alt="upload successful"></p><h3 id="配置日志输出"><a href="#配置日志输出" class="headerlink" title="配置日志输出"></a>配置日志输出</h3><p>默认情况下，控制台没有把日志打印出来，应该是没有找到log4j.properties。 </p><p>配置如下jvm启动参数，指定log4j.properties路径即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dlog4j.configuration=file:/Users/mic/Documents/software/opensource/zookeeper-release-3.5.5/conf/log4j.properties</span><br></pre></td></tr></table></figure><p>启动之后，会输出如下日志,表示启动成功， 默认使用<code>2181</code>的端口号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-07-18 09:49:28,391 [myid:] - INFO  [main:JettyAdminServer@112] - Started AdminServer on address 0.0.0.0, port 8080 and command URL /commands</span><br><span class="line">2019-07-18 09:49:28,401 [myid:] - INFO  [main:ServerCnxnFactory@135] - Using org.apache.zookeeper.server.NIOServerCnxnFactory as server connection factory</span><br><span class="line">2019-07-18 09:49:28,407 [myid:] - INFO  [main:NIOServerCnxnFactory@673] - Configuring NIO connection handler with 10s sessionless connection timeout, 1 selector thread(s), 8 worker threads, and 64 kB direct buffers.</span><br><span class="line">2019-07-18 09:49:28,410 [myid:] - INFO  [main:NIOServerCnxnFactory@686] - binding to port 0.0.0.0/0.0.0.0:2181</span><br></pre></td></tr></table></figure><h2 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h2><h3 id="zkCli"><a href="#zkCli" class="headerlink" title="zkCli"></a>zkCli</h3><p>用zkCli工具来连接。<br>执行：./zkCli.sh -server 服务器ip:2181</p><h3 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h3><p>使用telent 命令， 可以测试<br><code>telnet ip 2181</code></p><h1 id="maven形式的导入"><a href="#maven形式的导入" class="headerlink" title="maven形式的导入"></a>maven形式的导入</h1><p>zookeeper源码没有使用maven来构建，如果一定要用maven，可以自己创建一个maven工程。把zookeeper-server的代码全部拷贝过来即可。</p><p>其实本质上就是，自己把它改造成一个maven项目</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我在使用IDEA导入zookeeper并且尝试运行时，遇到了很多的问题， 如果大家也遇到类似的需求，可以参考这篇文章来做&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[弗洛伊德]精神分析学的发展史</title>
    <link href="https://istio.tech/2019/07/11/%E5%AF%BB%E6%89%BE%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7/"/>
    <id>https://istio.tech/2019/07/11/寻找弗洛伊德/</id>
    <published>2019-07-11T14:17:00.000Z</published>
    <updated>2019-07-12T12:54:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>精神分析学是研究人类无意识心理学的一门学科<br>精神分析学说认为，精神疾病的发生是由无意识的冲突造成的。比如焦虑症、抑郁症、精神分裂症的发病都隐藏在无意识里。</p><a id="more"></a><p>待人接物拘谨刻板以及酿成人生不幸的乖戾性格，也可以从无意识里找到原因，这些无意识的原因，使得有些人生性谨慎，不善于沟通；有的人一想到要见人就心慌意乱；有的人很善于和人交往；有的人过分自恋；有的人喜欢支配和利用他人；</p><p>而精神分析学的核心思想就是从无意识中找出造成这些人异常人格的来龙去脉。因此精神分析疗法首先是把无意识里隐藏的冲突外化，再进行治疗</p><h2 id="由无意识产生的疾病案例"><a href="#由无意识产生的疾病案例" class="headerlink" title="由无意识产生的疾病案例"></a>由无意识产生的疾病案例</h2><p>被禁锢的情感（这种情感是不道德的，神经症患者无法接受），会在无意识中造成精神上的创伤记忆引起躯体疾病</p><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><p>安娜.欧 ， 患上了“水恐惧症”，她的症状无法从躯体找出病因。在催眠状态下，她说出了一件事：又一次她看到佣人养的狗正在舔食玻璃杯里的水。她感到很恶心，但是出于礼貌她什么话都没有说。在催眠状态下尽情的发泄对于佣人的厌恶情绪。在发泄完以后竟然喝了很多水。从此她”水恐惧症“再也没发生过</p><h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><p>有一个女孩得了”癫痫症“，通过催眠发现：她曾经被一只口吐白沫扑上来的狗吓得半死。而这个下女孩的症状也是在被狗惊吓之后产生的。通过对这段记忆的消除，这个女孩的症状再也没有复发</p><h1 id="精神分析学的发展历程"><a href="#精神分析学的发展历程" class="headerlink" title="精神分析学的发展历程"></a>精神分析学的发展历程</h1><p>精神分析学的发展历程分为四个阶段</p><h2 id="情感创伤阶段"><a href="#情感创伤阶段" class="headerlink" title="情感创伤阶段"></a>情感创伤阶段</h2><p>弗洛伊德通过观察到夏科博士通过催眠术将原本肢体瘫痪的患者治愈好引发了对于神经学的高度关注。并且他从夏科博士那里获得了两个启发</p><ol><li>精神疾病患者是由心里原因导致</li><li>心理功能具有两个不同的层面，意识和无意识。</li></ol><p>后来，弗洛伊德开了一个诊所专收重症精神疾病患者。他通过催眠治疗法，从很多患者身上发现，癔症症状的发生都伴随着曾经的创伤体验的记忆。这些记忆都异常在无意识中，只要找到它就可以消除病症</p><p>通过多许多病例的研究，他创作了《癔症研究》，这本书的观点认为，绝大部分的精神疾病患者都是由精神上的创伤体验引发的。并且认为，将内心隐藏的创伤记忆说出来就能治愈病症。也就是说，只需要患者把心中压抑的创伤情感发泄出来就能祛除病根，从而治愈疾病。</p><p>并且在这个过程中，弗洛伊德发现了无意识的存在，并且开始探索通过说出遗忘的记忆来达到治愈病症的方法。</p><h2 id="分域论阶段"><a href="#分域论阶段" class="headerlink" title="分域论阶段"></a>分域论阶段</h2><p>这个阶段是精神分析的理论和治疗快速发展的时期。是精神分析分域理论占支配地位的时期，也可以称为本我心理学。<br>通过第一阶段的总结，弗洛伊德认为幼年时期的创伤经验，会通过猛或者精神症状的形式表现出来。精神创伤是实际存在的，关键是造成创伤的内容。而且他还发现，大部分患者的创伤经历都和性有关</p><p>但是，在后续的患者案例分析中，以及弗洛伊德对于自身的分析体检中发现，精神世界的冲突不只来自于现实的创伤，更多的是来自于幻想。引发病症的原因是内心的冲突，而冲突的产生并不是来自于现实的创伤，而是人的内在欲望和幻想。当弗洛伊德理解了这些事实之后，他随后提出了一个新的主张</p><blockquote><p>神经症的起因是患者的内部活动以及与冲动有关的幻想。</p></blockquote><p>弗洛伊德认识到，对梦境的解析非常有助于理解人的内心冲突，他随后对很多患者采用这种方法进行治疗，并且在积累和很多梦的经验之后，他出版了《梦的解析》，在这本书中，大概描绘了“分域模式“的理论框架。也就是说：以地理空间和地理术语来构建心理模型。简单来说就是无意识和意识的分域</p><p>随着理论的不断完善，弗洛伊德的治疗方法也随着完善。让患者说出无意识里隐藏的记忆有两种方法</p><ol><li>使用催眠术并且给一些有意的暗示</li><li>让患者随意想象</li></ol><p>弗洛伊德倾向于后者，让患者在没有任何压力的环境中自由联想，更多的展示他的内心世界。</p><h2 id="结构论阶段"><a href="#结构论阶段" class="headerlink" title="结构论阶段"></a>结构论阶段</h2><p>这一个阶段可以认为是对于分域论的进一步完善，在这个阶段，弗洛伊德主要以自我，本我，超我的人格结构来说明人的精神现象</p><blockquote><p>本我：原始和本能的欲望属于本我，本我是先天性和体质性的</p></blockquote><blockquote><p>自我：自我是从本我中产生出来，自我的基本职责是保存自身，通过延迟满足本能欲望的方法，调节本我的压力和现实要求两者之间的矛盾</p></blockquote><blockquote><p>超我：代表道德和良心，是自我的理想化。超我大部分隐藏在无意识中。</p></blockquote><p>这个阶段的理论认为，意识是”自我感觉器官“自我必须应付3位主人：本我，超我以及外部的现实需求。这3位主人中任何一方吓唬自我，自我都会因焦虑而发抖。</p><p>在这个阶段，弗洛伊德的精神分析法也有了变化，他更加关心自我对现实的认识。</p><h2 id="精神分析学的发展"><a href="#精神分析学的发展" class="headerlink" title="精神分析学的发展"></a>精神分析学的发展</h2><p>在这一阶段，结构论被人们所关注，得到了快速的发展</p><ul><li>弗洛伊德的小女儿安娜出版了《自我和防御机制》和《自我心理学和适应问题》</li><li>英国客体关系理论在精神分析的发展中做出了很大的贡献</li><li>分析家科胡特创立”自我心理学“，在治疗自恋人格障碍方面取得非常好的成绩</li></ul><p>克莱因学派和科胡特学派是精神分析第四阶段最有影响力的学派。克莱因学派以伦敦为中心，后来以南美为中心，形成了很大的影响范围。科胡特学派也积极扩大自己的影响力</p><p>以美国精神分析学会为中心研发者发展了自我心理学，以英国为中心的研发者发展了客体关系的理论，以南美为中心发展的克莱因学派侧重于攻击本能和幻想理论</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;精神分析学是研究人类无意识心理学的一门学科&lt;br&gt;精神分析学说认为，精神疾病的发生是由无意识的冲突造成的。比如焦虑症、抑郁症、精神分裂症的发病都隐藏在无意识里。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://istio.tech/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="心理学" scheme="https://istio.tech/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
      <category term="寻找弗罗伊德" scheme="https://istio.tech/tags/%E5%AF%BB%E6%89%BE%E5%BC%97%E7%BD%97%E4%BC%8A%E5%BE%B7/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo快速构建个人博客</title>
    <link href="https://istio.tech/2019/07/09/%E4%BD%BF%E7%94%A8Hexo%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://istio.tech/2019/07/09/使用Hexo快速构建个人博客/</id>
    <published>2019-07-09T07:15:00.000Z</published>
    <updated>2019-07-11T14:46:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用github搭建个人博客后，一个不懂前端开发的人如何去写各种前端页面呢？好在，有了hexo，这些都可以轻松搞定.</p><a id="more"></a><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页</p></blockquote><p>这篇文章我会写如何使用hexo快速构建一个漂亮的个人博客。如果想获得更多的素材，可以在<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a>中查看</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="node环境安装"><a href="#node环境安装" class="headerlink" title="node环境安装"></a>node环境安装</h2><p>下载Node.js 官方地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p><p><strong>选择一个适合系统的版本</strong><br><img src="/images/pasted-5.png" alt="upload successful"></p><p>安装的过程比较简单，直接一直<code>下一步</code>即可。安装成功后，在<code>cmd</code>中输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v 查看 node 版本</span><br><span class="line">npm -v 查看 npm 版本</span><br></pre></td></tr></table></figure><h2 id="使用node安装hexo"><a href="#使用node安装hexo" class="headerlink" title="使用node安装hexo"></a>使用node安装hexo</h2><p>node安装好之后，可以使用npm来安装hexo</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog(生成的博客文件夹的名字，自定义,会在对应执行该语句的路径生成对应的文件)</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server（启动hexo）</span><br></pre></td></tr></table></figure><p>输入: <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a><br>就可以看到默认的博客页面了</p><h1 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h1><h2 id="hexo基本命令"><a href="#hexo基本命令" class="headerlink" title="hexo基本命令"></a>hexo基本命令</h2><p>这些命令，大部分都要在上一步创建好的<code>blog</code>目录下来执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure><h2 id="如何把博客发布到github"><a href="#如何把博客发布到github" class="headerlink" title="如何把博客发布到github"></a>如何把博客发布到github</h2><p>前面我们在本地通过<code>http://localhost:4000</code>可以访问到默认的博客站点，如果需要发布到外网访问，需要把代码上传到github对应站点的repository中。<br>通过<code>hexo deploy</code> 把生成好的静态页面发布到git，但是在此之前，需要配置目标github的地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">vim _config.xml</span><br></pre></td></tr></table></figure><p>找到<code>deploy</code>的配置项，增加如下配置。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="string">git@github.com:2227324689/2227324689.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>接着执行<code>hexo deploy</code>，就能把页面提交到github。</p><blockquote><p>如果出现下面这个错误，说明还需要安装一个插件，在根目录下执行<code>npm install hexo-deployer-git --save</code> 安装插件</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deployer <span class="keyword">not</span> found: github 或者 Deployer <span class="keyword">not</span> found: git</span><br></pre></td></tr></table></figure><h2 id="如何更新文章呢？"><a href="#如何更新文章呢？" class="headerlink" title="如何更新文章呢？"></a>如何更新文章呢？</h2><p>博客搭建好之后，最重要的就是要更新博客了。有两种方式来更新</p><h3 id="使用命令来创建"><a href="#使用命令来创建" class="headerlink" title="使用命令来创建"></a>使用命令来创建</h3><p>进入到<code>blog</code>目录，执行<code>hexo new &#39;blog-name&#39;</code> 来创建一个页面，在blog\source_post目录下就会生成一个blog-name.md文件</p><p>然后我们使用markdown的语法来写文章即可</p><h3 id="使用hexo-admin更新博客"><a href="#使用hexo-admin更新博客" class="headerlink" title="使用hexo-admin更新博客"></a>使用hexo-admin更新博客</h3><p>hexo提供了一个admin页面，来基于可视化窗口更新博客.<br>执行下面两个命令，安装hexo-admin以及启动hexo server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br><span class="line">hexo server -d(开启hexo操作)</span><br></pre></td></tr></table></figure><p>打开<a href="http://IP:4000/admin" target="_blank" rel="noopener">http://IP:4000/admin</a> 就可以进入控制台。</p><ul><li>posts 新建博客</li><li>pages 页面</li><li>deploy 将更新的博客发布到github</li></ul><h2 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h2><p>默认的博客界面比较丑，想要更换主题怎么办呢？</p><p>hexo官方提供了非常多的主题：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a><br>选择自己喜欢的主题，并且下载到本地。<br>把主题拷贝到 <code>blog/themes</code>目录下</p><p>修改_config.yml中的theme: landscape改为theme: yilia，然后执行hexo g来重新基于新的主题生成静态页面</p><h2 id="更多的hexo操作"><a href="#更多的hexo操作" class="headerlink" title="更多的hexo操作"></a>更多的hexo操作</h2><p>由于每个人对于hexo的使用需求不一样，所以大家可以自己去<br><a href="https://hexo.io/zh-cn/docs/plugins" target="_blank" rel="noopener">这个网站</a>查看更多的hexo说明。</p><p><img src="/images/pasted-6.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用github搭建个人博客后，一个不懂前端开发的人如何去写各种前端页面呢？好在，有了hexo，这些都可以轻松搞定.&lt;/p&gt;
    
    </summary>
    
      <category term="备忘录" scheme="https://istio.tech/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="Hexo" scheme="https://istio.tech/tags/Hexo/"/>
    
      <category term="Node" scheme="https://istio.tech/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Github搭建个人博客</title>
    <link href="https://istio.tech/2019/07/09/hello-world/"/>
    <id>https://istio.tech/2019/07/09/hello-world/</id>
    <published>2019-07-09T05:39:00.000Z</published>
    <updated>2019-07-11T14:40:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作为程序员，我们把大部分写代码的能力交给了搜索引擎，把大部分时间交给了业务逻辑的开发。却很少停下来对自己的工作和学习做一些总结和思考。我认为写博客是一种很好的习惯，不是为了给别人看自己写的东西有多🐂🍺，而是阶段性的给自己做一些总结。长期的积累，能够给自己带来很大的变化！</p></blockquote><a id="more"></a><p>我以前比较喜欢用gitbook来整理一些东西，后来因为github用得多，就干脆基于github来构建一个个人博客，闲暇之余可以把一些东西沉淀下来。</p><h1 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h1><h2 id="账号注册"><a href="#账号注册" class="headerlink" title="账号注册"></a>账号注册</h2><p>打开这个网址，注册一个github的账号<br><a href="https://github.com/join?source=header-home" target="_blank" rel="noopener">https://github.com/join?source=header-home</a></p><h2 id="创建repository"><a href="#创建repository" class="headerlink" title="创建repository"></a>创建repository</h2><p>创建一个repository，repository name设置的注意事项</p><p>[username].github.io , <code>username</code> 必须是github注册的用户名，否则无法访问</p><p><img src="/images/pasted-0.png" alt="upload successful"></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>创建好repository之后，提交一个基本的index.html。然后使用<br><code>[username].github.io</code> 来访问到index.html页面</p><blockquote><p>在本地的终端上，按照下面的命令，来提交一个index.html文件到github对应刚刚创建的repository中</p></blockquote><p><strong>index.html自己提前创建好，内容没有要求</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add index.html</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin https://github.com/2227324689/2227324689.github.io.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>如果本地没有安装git客户端，是无法使用这些命令的。</p><h2 id="git客户端（window"><a href="#git客户端（window" class="headerlink" title="git客户端（window)"></a>git客户端（window)</h2><p>首先下载git for window 客户端<br><a href="https://github.com/git-for-windows/git/releases/tag/v2.22.0.windows.1" target="_blank" rel="noopener">https://github.com/git-for-windows/git/releases/tag/v2.22.0.windows.1</a></p><p>根据自己的操作系统版本来选择对应的下载文件。<br><img src="/images/pasted-1.png" alt="upload successful"></p><p>安装过程就不再赘述，一直<code>下一步</code>即可，安装结束之后，可以在<code>cmd</code>命令中输入<code>git -v</code> ，如果能够返回当前git的版本号，说明git安装成功了。</p><h2 id="git配置ssh"><a href="#git配置ssh" class="headerlink" title="git配置ssh"></a>git配置ssh</h2><p>github提供了两种方式来pull/push 文件，一种是基于https，一种是基于ssh。两种方式都可以用，但是为了方便起见（不用每次都输入密码），可以配置ssh</p><p><img src="/images/pasted-2.png" alt="upload successful"></p><h3 id="在本地生成ssh-公私钥"><a href="#在本地生成ssh-公私钥" class="headerlink" title="在本地生成ssh 公私钥"></a>在本地生成ssh 公私钥</h3><blockquote><p>检查本机是否有ssh key设置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh 或cd .ssh</span><br><span class="line"></span><br><span class="line">如果没有则提示： No such file or directory</span><br><span class="line"></span><br><span class="line">如果有则进入~/.ssh路径下（ls查看当前路径文件，rm * 删除所有文件）</span><br><span class="line">$ cd ~/.ssh 或cd .ssh</span><br><span class="line"></span><br><span class="line">**如果.ssh文件夹不存在，则创建一个**</span><br></pre></td></tr></table></figure><blockquote><p>使用ssh-keygen生成公私钥</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在.ssh目录下，执行`ssh-keygen -t rsa -C &quot;xxxxxx@yy.com&quot;`</span><br><span class="line">邮箱地址没有限制，建议填有效邮箱</span><br><span class="line">代码参数含义：</span><br><span class="line">-t 指定密钥类型，默认是 rsa ，可以省略。</span><br><span class="line">-C 设置注释文字，比如邮箱。</span><br><span class="line">-f 指定密钥文件存储文件名。</span><br></pre></td></tr></table></figure><p>这个命令执行过程中，会要求你输入文件名和密码，如果不需要改，则直接默认回车就行<br>这里的密码可以不用设，如果设置了，后续每次提交文件到github都需要输入密码验证</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> which to save the key (/Users/mic/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><p><strong>命令执行结束后，会在.ssh目录下生成两个文件，<code>id_rsa</code>,<code>id_rsa.pub</code></strong></p><p>id_rsa.pub是公钥，这个公钥可以直接用可以打开，里面就是一段公钥的代码，这段代码需要复制下来。后续需要配置到github上</p><h3 id="github上配置公钥"><a href="#github上配置公钥" class="headerlink" title="github上配置公钥"></a>github上配置公钥</h3><p>进入 &gt; profile -&gt; settings -&gt;ssh and GPG keys。<br>或者直接<a href="https://github.com/settings/keys" target="_blank" rel="noopener">点击这里</a>直接跳转到ssh key配置的页面</p><p><img src="/images/pasted-3.png" alt="upload successful"></p><p>点击<code>New SSH key</code>.</p><p>title  自己定义一个名称，一般来说用来区分当前是哪个机器的key，后续方便管理</p><p>key   把前面生成的<code>id_rsa.pub</code>文件中的内容全部复制粘贴在这里即可。点击<code>Add SSH key</code> 保存</p><p><img src="/images/pasted-4.png" alt="upload successful"></p><blockquote><p>在本地的客户端进行测试</p></blockquote><p>输入下面命令，所有内容都不用改。 </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line"></span><br><span class="line">--如果返回下面这个信息，说明ssh配置成功了</span><br><span class="line">Hi <span class="number">2227324689</span>! You've successfully authenticated, but GitHub does <span class="keyword">not</span> provide shell access.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作为程序员，我们把大部分写代码的能力交给了搜索引擎，把大部分时间交给了业务逻辑的开发。却很少停下来对自己的工作和学习做一些总结和思考。我认为写博客是一种很好的习惯，不是为了给别人看自己写的东西有多🐂🍺，而是阶段性的给自己做一些总结。长期的积累，能够给自己带来很大的变化！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="备忘录" scheme="https://istio.tech/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="Hexo" scheme="https://istio.tech/tags/Hexo/"/>
    
      <category term="github" scheme="https://istio.tech/tags/github/"/>
    
      <category term="博客" scheme="https://istio.tech/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
